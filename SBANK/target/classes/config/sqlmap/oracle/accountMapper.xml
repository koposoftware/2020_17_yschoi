<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "Http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="account.dao.AccountDAO">
	  <insert id="insert" parameterType="accountVO">
      	insert into S_ACCOUNT(ID, BANK_NAME, ACCOUNT_NUM, BALANCE,NICK_NAME,type,currencycode)
      	values( #{id}, ( select STANDARD_HASH ( #{bank_name}, 'SHA256') from dual  ), #{account_num}, #{balance},#{nick_name},#{type},'-')
    </insert> 
    
    <!-- 계좌 개설시 계좌번호 중복 방지 차 있는 번호인지 확인함. -->
    <select id="chkAccountNumIsExistAlready" parameterType="string" resultType="int">
      select count(*) from S_ACCOUNT where account_num = #{account_num}
    </select>
    
    <!--  원화계좌 모두 조회 -->
    <select id="selectKrwAll" resultType="accountVO" parameterType="string" >
    	select * from S_ACCOUNT where id = #{id} and type='K'
    </select>
    
    <!--  외화계좌 모두 조회 -->
    <select id="selectCurAll" resultType="accountVO" parameterType="string" >
      select * from S_ACCOUNT where id = #{id} and type='C' and currencycode='-'
    </select>
    
    <!-- 계좌이체 출금 -->
    <update id="transfer1" parameterType="accountVO" >
    	update S_ACCOUNT set balance = balance - #{balance}
    	where account_num=#{account_num}
    </update>
    
    <!-- 계좌이체 입금 -->
    <update id="transfer2" parameterType="accountVO" >
    	update S_ACCOUNT set balance = balance + #{balance}
    	where account_num=#{bank_name}
    </update>
    
    <!-- 환전하기 기능. 원화계좌에서 환전시 필요한만큼의 돈 빼기! -->
    <update id="doExchange" parameterType="exchangeVO">
      update S_ACCOUNT set balance = balance - #{exchangecharge} where account_num=#{account_num}
    </update>
    
    <!-- 외화계좌 번호 가져오기 -->
    <select id="chkCurAccount_num" parameterType="string" resultType="string">
      select ACCOUNT_NUM from s_account where id =#{id} and type='C'
    </select>
    
    <!-- S_CURLIST에 해당 통화와 관련된 record있는지 확인 -->
    <select id="chkRecordCurrencyCode" parameterType="exchangeVO" resultType="int">
      select count(*) from S_CURLIST 
        where account_num = #{reg_date} and currencycode=#{currencycode}
    </select>
    <select id="chkRecordS_CURLIST" parameterType="curlistVO" resultType="int">
      select count(*) from S_CURLIST 
        where account_num = #{account_num_to} and currencycode=#{currencycode}
    </select>
    
    
    <!-- 환전하기 기능에서 외화계좌에 돈 insert -->
    <insert id="doExchangeCurInsert" parameterType="exchangeVO">
      insert into S_CURLIST(no, account_num,balance,currencycode) values 
        (seq_S_CURLIST_no.nextval , #{reg_date}, #{exchangeprice} , #{currencycode}  )
    </insert>
    
    <!-- 환전하기 기능에서 외화계좌에 돈 update -->
    <update id="doExchangeCurUpdate" parameterType="exchangeVO" >
      update S_CURLIST set BALANCE = BALANCE + #{exchangeprice}
        where ACCOUNT_NUM = #{reg_date} and CURRENCYCODE  = #{currencycode}
    </update>
    
    
    <!-- 계좌비밀번호 확인. 리턴값 잔액 -->
    <select id="chkPassword" parameterType="accountVO" resultType="int">
      select count(*) from S_ACCOUNT where account_num = #{account_num} and bank_name =#{bank_name}
    </select>
    
    <!-- 외화계좌의 소유 id 리턴 -->
    <select id="chkIfAccountExist" parameterType="string" resultType="string">
      select id from s_Account where ACCOUNT_NUM = #{account_num} and TYPE='C'
    </select>
    
    
    
    
</mapper>