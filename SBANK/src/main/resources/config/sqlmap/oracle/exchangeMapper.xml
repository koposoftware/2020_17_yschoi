<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="exchange.dao.ExchangeDAO">


	<!-- 모든 통화에대한 환율정보 조회 -->	
	<select id="selectAll"  resultType="currencyVO"  >
		select currency,cashbuyrate,cashbuyspread,cashsellrate,
			cashsellspread,remittance,receive,tcbuy,fcsell,basicrate,
			conversion,usdrate,regdate,commission,commission2,commission3,commission4
		from s_currencyrate
	</select>
	
	<!-- 여기서부터 4개는 환율정보  고시회차 관련 -->
	<select id="exchange.dao.ExchangeDAO.selectDummyOne" resultType="string">
	 select one from dummy
	</select>
	<select id="exchange.dao.ExchangeDAO.selectDummyTwo" resultType="string">
	 select two from dummy
	</select>
	<select id="exchange.dao.ExchangeDAO.selectDummyThr" resultType="string">
	 select thr from dummy
	</select>
	<select id="exchange.dao.ExchangeDAO.selectDummyFou" resultType="string">
	 select fou from dummy
	</select>
	
	
	<!-- 통화 기준으로 환율정보 조회 -->
	<select id="getRateCommission"  resultType="currencyVO" parameterType="string"  >
		select currency,cashbuyrate,cashbuyspread,cashsellrate,
			cashsellspread,remittance,receive,tcbuy,fcsell,basicrate,
			conversion,usdrate,regdate,commission,commission2,commission3,commission4
		from s_currencyrate where currency = #{currency}
	</select>
	
	
	<!-- 환전하기 기능 -->
	<insert id="doExchange" parameterType="exchangeVO">
		insert into S_EXCHANGE(exchangeNo,id,currencycode,exchangeprice,exchangerate,exchangecharge,name,exchange_date,exchange_place,account_num)  
		values(seq_S_EXCHANGE_no.nextval,#{id},#{currencycode},#{exchangeprice},#{exchangerate},#{exchangecharge},
				#{name},#{exchange_date},#{exchange_place},#{account_num} )
	</insert>
  
  <!-- 환전예약하기 기능 -->
  <insert id="doReserve" parameterType="reserveVO">
    insert into S_RESERVATION(reserveno,id,account_num,currencycode,exchangeprice,exchangerate,exchangecharge,max_date) 
      values(seq_S_RESERVATION_no.nextval,#{id},#{account_num},#{currencycode},#{exchangeprice},#{exchangerate},#{exchangecharge},#{max_date} )
  </insert>
  <insert id="doReserve2" parameterType="reserveVO">
    insert into S_RESERVATION(reserveno,id,account_num,currencycode,exchangeprice,exchangerate,exchangecharge) 
      values(seq_S_RESERVATION_no.nextval,#{id},#{account_num},#{currencycode},#{exchangeprice},#{exchangerate},#{exchangecharge})
  </insert>
  
  <!-- 비회원 환전하기 기능 -->
  <insert id="doKakaoExchange" parameterType="exchangeVO">
    insert into S_EXCHANGE(exchangeNo,id,currencycode,exchangeprice,exchangerate,exchangecharge,name,exchange_date,exchange_place,account_num)  
    values(seq_S_EXCHANGE_no.nextval,#{id},#{currencycode},#{exchangeprice},#{exchangerate},#{exchangecharge},
        #{name},#{exchange_date},#{exchange_place},#{account_num} )
  </insert>
  
  <!-- 환전내역조회 -->
  <select id="selectExchange" parameterType="string" resultType="exchangeVO">
    select exchangeNo,id,currencycode,exchangeprice,exchangerate,exchangecharge,name, to_char(exchange_date, 'yyyy-mm-dd') as exchange_date, exchange_place, 
        case when  to_char(reg_date,'YYYYMMDD')=TO_CHAR(SYSDATE, 'YYYYMMDD') then to_char(reg_date,'hh24-mi-ss') else to_char(reg_date,'yyyy-mm-dd') end as reg_date
    from s_exchange where id = #{id} order by exchangeno desc
  </select>
  
  <!-- 환전예약내역조회 -->
  <select id="selectReserve" parameterType="string" resultType="reserveVO">
    select reserveno, id, account_num, currencycode,exchangeprice,exchangerate,exchangecharge,isalarm,isexchange,iscancle, to_char(max_date, 'yyyy-mm-dd') as max_date,
    case when  to_char(reg_date,'YYYYMMDD')=TO_CHAR(SYSDATE, 'YYYYMMDD') then to_char(reg_date,'hh24-mi-ss') else to_char(reg_date,'yyyy-mm-dd') end as reg_date 
    from S_RESERVATION where id = #{id}  order by reserveno desc
  </select>
  
  <!-- 재환전내역 조회 -->
  <select id="selectRevExchange" parameterType="string" resultType="revExchangeVO">
    select exchangeNo, id, currencycode,exchangeprice,exchangecharge,exchangerate,account_num_from,account_num_from,
    case when  to_char(reg_date,'YYYYMMDD')=TO_CHAR(SYSDATE, 'YYYYMMDD') then to_char(reg_date,'hh24-mi-ss') else to_char(reg_date,'yyyy-mm-dd') end as reg_date 
    from S_REVEXCHANGE where id = #{id} order by EXCHANGENO desc
  </select>
  
  <!-- 보유외화조회가아닐까 생각합니닷 -->
  <select id="selectCurrency" parameterType="string" resultType="curlistVO" >
    select * from S_CURLIST where account_num = #{account_num}
  </select>
  
  <!-- 외화선물하기 출금 -->
  <update id="transfer1" parameterType="presentVO">
    update S_CURLIST set balance = balance - #{balance} where account_num = #{account_num}
  </update>
  
  <!-- 외화선물하기 입금 - update -->
  <update id="transfer2" parameterType="presentVO">
    update S_CURLIST set balance = balance + #{balance} where account_num = #{account_num_to}
  </update>
  
  <insert id="transfer2_2" parameterType="presentVO">
    insert into S_CURLIST 
      values(seq_S_CURLIST_no.nextval, #{account_num_to}, #{currencycode}, #{balance})
  </insert>
  
  <!-- string 인풋에 대해 해쉬값 리턴 -->
  <select id="returnHash" parameterType="string" resultType="string">
    select STANDARD_HASH ( #{pwd}, 'SHA256') from dual
  </select>
  
  <!-- 재환전하기 기능 -->
  <insert id="doRevExchange" parameterType="revExchangeVO" >
    insert into S_REVEXCHANGE(exchangeNo,id,currencycode,exchangeprice,exchangerate,exchangecharge,account_num_from,account_num_to) values
      (seq_S_REVEXCHANGE_no.nextval , #{id}, #{currencycode}, #{exchangeprice}, #{exchangerate}, #{exchangecharge},#{account_num_from},#{account_num_to})
  </insert>
  
  <!-- 환전내역에서 수령일 수령일 수령지점 수정하기 -->
  <update id="changeInfo" parameterType="exchangeVO">
    update s_exchange set name=#{name}, exchange_date=#{exchange_date}, exchange_place=#{exchange_place} 
    where exchangeNo=#{exchangeNo} 
  </update>
  
  <!-- 최근 7일동안 환전 수 구하기 -->
  <!-- <select id="exchangeCntSeven" resultType="exchangeVO">
    select count(*) as exchangeNo,to_char(REG_DATE, 'YYYY-MM-DD') as REG_DATE 
    from S_EXCHANGE WHERE REG_DATE >= TO_CHAR(SYSDATE-6,'YYYY-MM-DD') group by to_char(REG_DATE, 'YYYY-MM-DD') 
    order by REG_DATE
  </select> -->
  <select id="exchangeCntSeven" resultType="exchangeVO">
    select count(*) as exchangeNo,to_char(REG_DATE, 'YYYY-MM-DD') as REG_DATE 
    from S_EXCHANGE WHERE to_char(REG_DATE, 'YYYY-MM-DD') >= TO_CHAR(SYSDATE-6,'YYYY-MM-DD') group by to_char(REG_DATE, 'YYYY-MM-DD') 
    order by REG_DATE
  </select>
  
  <!-- 최근 7일동안 환전 예약 수 구하기 -->
  <select id="reserveCntSeven" resultType="reserveVO">
    select count(*) as reserveno,to_char(REG_DATE, 'YYYY-MM-DD') as REG_DATE 
    from S_RESERVATION WHERE to_char(REG_DATE, 'YYYY-MM-DD') >= TO_CHAR(SYSDATE-6,'YYYY-MM-DD') group by to_char(REG_DATE, 'YYYY-MM-DD') 
    order by REG_DATE
  </select>
  
 <!--  최근 7일동안 재환전 수 구하기 -->
  <select id="revExchangeCntSeven" resultType="revExchangeVO">
    select count(*) as exchangeNo,to_char(REG_DATE, 'yyyy-mm-dd') as REG_DATE 
    from S_REVEXCHANGE WHERE to_char(REG_DATE, 'yyyy-mm-dd') >= TO_CHAR(SYSDATE-6,'yyyy-mm-dd') group by to_char(REG_DATE, 'yyyy-mm-dd') 
    order by REG_DATE
  </select>
  
  <!-- 오늘 하루 환전 수 구하기 -->
  <select id="exchangeCntOne" resultType="int">
    select count(*) as exchangeNo from S_EXCHANGE WHERE TO_CHAR(REG_DATE,'YYYYMMDD') = TO_CHAR(SYSDATE,'YYYYMMDD')
  </select>
  
  <!-- 오늘 하루 환전 예약 수 구하기 -->
  <select id="reserveCntOne" resultType="int">
    select count(*) as reserveno from  S_RESERVATION WHERE TO_CHAR(REG_DATE,'YYYYMMDD') = TO_CHAR(SYSDATE,'YYYYMMDD')
  </select>
  
  <!--  오늘 하루 재환전 수 구하기 -->
  <select id="revExchangeCntOne" resultType="int">
    select count(*) as exchangeNo from  S_REVEXCHANGE WHERE TO_CHAR(REG_DATE,'YYYYMMDD') = TO_CHAR(SYSDATE,'YYYYMMDD')
  </select>
  
  <!-- 오늘 하루 가장 인기 있었던 통화의 코드 구하기 -->
  <select id="currencyCodeCntOne" resultType="string">
    select CURRENCYCODE from (
      select count(*) as cnt,CURRENCYCODE from 
        (select CURRENCYCODE from S_REVEXCHANGE WHERE TO_CHAR(REG_DATE,'YYYYMMDD') = TO_CHAR(SYSDATE,'YYYYMMDD')
          union all
        (select CURRENCYCODE from S_EXCHANGE WHERE TO_CHAR(REG_DATE,'YYYYMMDD') = TO_CHAR(SYSDATE,'YYYYMMDD')
        union all
      select CURRENCYCODE from S_RESERVATION WHERE TO_CHAR(REG_DATE,'YYYYMMDD') = TO_CHAR(SYSDATE,'YYYYMMDD'))) group by CURRENCYCODE
      order by cnt desc) where rownum=1
  </select>
  
  
</mapper>